from LotoBot.config import TOKEN, admin_id
from LotoBot.markups import *
from utils import *

import telebot



bot = telebot.TeleBot(TOKEN)




# ==============================================================
# User Interface

@bot.message_handler(commands=['start'])
def start_user_message(message):
    if not get_user_first_name(message.chat.id):
        create_user(message.chat.id, message.chat.first_name)
    update_variables_stage(message.chat.id, 'user')
    bot.send_message(message.chat.id,
                     'üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LotoBot! üí∞\n'
                     '–≠—Ç–æ –±–æ—Ç-–ª–æ—Ç–µ—Ä–µ—è üé∞\n'
                     '–í—ã –∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –≤ –ª–æ—Ç–µ—Ä–µ–µ? ü§î\n'
                     '–ó–¥–µ—Å—å –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞: –≤–æ–∑—å–º–∏—Ç–µ –±–∏–ª–µ—Ç üìá –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ –º–∏–ª–ª–∏–æ–Ω üí∏ (–∞ –º–æ–∂–µ—Ç –¥–∞–∂–µ –±–æ–ª—å—à–µ üí∏üí∏üí∏)',
                     reply_markup=start_menu())


@bot.message_handler(func=lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' and
                                          get_variables_stage(message.chat.id) == 'user')
def get_contacts_user_message(message):
    bot.send_message(message.chat.id,
                     '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ üë®‚Äçüíª @DenisDarahan',  # TODO: change admin
                     reply_markup=start_menu())


@bot.message_handler(func=lambda message: message.text == 'üè° –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' and
                                          get_variables_stage(message.chat.id) == 'user')
def get_private_room_user_message(message):
    bot.send_message(message.chat.id,
                     'üè°   <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>   üè°\n\n'
                     'üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ä—É–±\n'
                     'üé≤ –£—á–∞—Å—Ç–∏–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: {} —Ä–∞–∑(–∞)'
                     ''.format(*get_variables_private_room_info(message.chat.id)),
                     parse_mode='HTML',
                     reply_markup=private_room_menu())


@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥' and
                                          get_variables_stage(message.chat.id) == 'user')
def get_contacts_user_message(message):
    bot.send_message(message.chat.id,
                     'üì∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                     parse_mode='HTML',
                     reply_markup=start_menu())


@bot.message_handler(func=lambda message: message.text == 'üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç' and
                                          get_variables_stage(message.chat.id) == 'user')
def start_raise_money(message):
    msg = bot.send_message(message.chat.id,
                           '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
                           reply_markup=private_room_menu())
    bot.register_next_step_handler(msg, get_amount_to_raise)


def get_amount_to_raise(message):
    result = get_float_from_message(message.text)
    if result == 'exit':
        bot.send_message(message.chat.id,
                         'üì∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                         parse_mode='HTML',
                         reply_markup=start_menu())
    elif result == 'not a number':
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∂–µ—Ç—Å—è, –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ...\n'
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞:',
                               reply_markup=private_room_menu())
        bot.register_next_step_handler(msg, get_amount_to_raise)
    else:
        msg = bot.send_message(message.chat.id,
                               '–ü—Ä–∏–Ω—è—Ç–æ!\n'
                               '–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {} —Ä—É–± {} –∫–æ–ø\n'
                               '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è\n\n'
                               '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è   <b>–í–ê–ñ–ù–û</b>   ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n'
                               '<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã - –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ –ù–ï–õ–¨–ó–Ø!\n'
                               '–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –í—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –í–∞—à–∏ –¥–µ–Ω—å–≥–∏!</i>'.format(*result),
                               parse_mode='HTML',
                               reply_markup=raise_money_account_menu(message.chat.id, *result))
        time.sleep(3)
        bot.send_message(message.chat.id,
                         '–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è\n'
                         '–û–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –ø—Ä–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞',
                         reply_markup=check_raise_money_account_menu(msg.message_id))


@bot.callback_query_handler(func=lambda call: call.data[:12] == 'check_money_')
def check_raise_money_payment_message(call):
    res = check_payment(call.message.chat.id)
    if res:
        msg_id = int(call.data[12:])
        update_variables_cur_payment(call.message.chat.id, '')
        real_amount = update_variables_amount(call.message.chat.id, res)
        bot.delete_message(call.message.chat.id, msg_id)
        bot.delete_message(call.message.chat.id, msg_id + 1)
        bot.send_message(call.message.chat.id,
                         '<b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n'
                         '    + {:.2f} üí¥ RUB\n'
                         'üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {:.2f} —Ä—É–±'.format(res, real_amount),
                         parse_mode='HTML',
                         reply_markup=private_room_menu())
        bot.answer_callback_query(call.id, '–£—Å–ø–µ—Ö!')
    else:
        bot.answer_callback_query(call.id, '–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ')


@bot.message_handler(func=lambda message: message.text == 'üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤' and
                                          get_variables_stage(message.chat.id) == 'user')
def start_withdraw_money(message):
    msg = bot.send_message(message.chat.id,
                           '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:',
                           reply_markup=private_room_menu())
    bot.register_next_step_handler(msg, get_amount_to_withdraw)


def get_amount_to_withdraw(message):
    amount = get_float_from_message(message.text)
    if amount == 'exit':
        bot.send_message(message.chat.id,
                         'üì∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                         parse_mode='HTML',
                         reply_markup=start_menu())
    elif amount == 'not a number':
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∂–µ—Ç—Å—è, –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ...\n'
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞:',
                               reply_markup=private_room_menu())
        bot.register_next_step_handler(msg, get_amount_to_withdraw)
    else:
        real_amount = get_variables_amount(message.chat.id)
        amount = float('{}.{}'.format(*amount))
        if real_amount < amount:
            msg = bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–µ–Ω–Ω–∞—è –í–∞–º–∏ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—É–º–º—É –Ω–∞ —Å—á–µ—Ç—É...\n'
                                   '–ë–∞–ª–∞–Ω—Å –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É: {} —Ä—É–±\n'
                                   '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞:'.format(real_amount),
                                   reply_markup=private_room_menu())
            bot.register_next_step_handler(msg, get_amount_to_withdraw)
        else:
            qiwi_acc = get_user_qiwi_acc(message.chat.id).split()
            if qiwi_acc:
                bot.send_message(message.chat.id,
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π:',
                                 reply_markup=create_qiwi_acc_menu(amount, qiwi_acc))
            else:
                msg = bot.send_message(message.chat.id,
                                       '–£ –í–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ üò±\n'
                                       '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ üí∏\n'
                                       '\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ +70001111111</i>',
                                       parse_mode='HTML',
                                       reply_markup=private_room_menu())
                bot.register_next_step_handler(msg, get_qiwi_acc_message, amount)


def get_qiwi_acc_message(message, amount):
    qiwi_acc = get_qiwi_acc_from_message(message.text)
    if qiwi_acc == 'exit':
        bot.send_message(message.chat.id,
                         'üì∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                         parse_mode='HTML',
                         reply_markup=start_menu())
    elif qiwi_acc == 'not a number':
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∂–µ—Ç—Å—è, –í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ...\n'
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞:',
                               reply_markup=private_room_menu())
        bot.register_next_step_handler(msg, get_qiwi_acc_message, amount)
    else:
        bot.send_message(message.chat.id,
                         '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ—à–µ–ª—ë–∫?',
                         reply_markup=check_save_qiwi_acc_menu(amount, qiwi_acc))


@bot.callback_query_handler(func=lambda call: call.data[4:14] == '_qiwi_acc_')
def check_save_qiwi_acc_message(call):
    answer = call.data.split('_')  # answer = [mode, 'qiwi', 'acc', amount, qiwi_acc]
    if answer[0] == 'delt':
        delete_user_qiwi_acc(call.message.chat.id, answer[-1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π:',
                         reply_markup=create_qiwi_acc_menu(float(answer[-2]), answer[-1]))
        bot.answer_callback_query(call.id, text=None)
    elif answer[-1] == '+0':
        msg = bot.send_message(call.message.chat.id,
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ üí∏\n'
                               '\n<i>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ +70001111111</i>',
                               parse_mode='HTML',
                               reply_markup=private_room_menu())
        bot.register_next_step_handler(msg, get_qiwi_acc_message, float(answer[-2]))
        bot.answer_callback_query(call.id, text=None)
    else:
        if answer[0] == 'save':
            update_user_qiwi_acc(call.message.chat.id, answer[-1])
            bot.answer_callback_query(call.id, text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        result = withdraw_money_from_account(answer[-2], answer[-1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        if result == True:
            real_amount = update_variables_amount(call.message.chat.id, -float(answer[-2]))
            bot.send_message(admin_id,
                             '<b>–í—ã–≤–æ–¥!</b>\n'
                             'ID: {}\n'
                             'Sum: {} —Ä—É–±'.format(call.message.chat.id, answer[-2]),
                             parse_mode='HTML')
            bot.send_message(call.message.chat.id,
                             '–ì–æ—Ç–æ–≤–æ!\n'
                             '–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –∫–æ—à–µ–ª—ë–∫!üòçüí∞\n\n'
                             '‚úÖ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–æ: {} —Ä—É–±\n'
                             'üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ä—É–±'.format(answer[-2], real_amount),
                             reply_markup=private_room_menu())
            bot.answer_callback_query(call.id, text='–£—Å–ø–µ—Ö!')
        elif result == None:
            bot.answer_callback_query(call.id, text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        else:
            bot.send_message(call.message.chat.id,
                             '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n'
                             '{}'.format(result),
                             reply_markup=private_room_menu())
            bot.answer_callback_query(call.id, text='–û—à–∏–±–∫–∞!')


@bot.message_handler(func=lambda message: message.text == 'üé≤ –†–æ–∑—ã–≥—Ä—ã—à–∏' and
                                          get_variables_stage(message.chat.id) == 'user')
def check_spoof_user_message(message):
    if get_spoof_active() and get_variables_cur_activity(message.chat.id) == 0:
        bot.send_message(message.chat.id,
                         'üé≤üé≤ <b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{}</b> üé≤üé≤\n\n'
                         '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {} —Ä—É–±\n'
                         'üí∞ –î–ñ–ï–ö–ü–û–¢ - {}% –û–¢ <b>–í–°–ï–ì–û</b> –ü–†–ò–ó–û–í–û–ì–û –§–û–ù–î–ê'.format(*get_spoof_info_for_message(4)),
                         parse_mode='HTML',
                         reply_markup=get_started_spoof_menu())
    elif get_variables_cur_activity(message.chat.id):
        bot.send_message(message.chat.id,
                         '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üòä\n\n'
                         'üé≤üé≤ <b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{}</b> üé≤üé≤\n\n'
                         '–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {} —Ä—É–±\n'
                         'üí∞ –î–ñ–ï–ö–ü–û–¢ - {}% –û–¢ <b>–í–°–ï–ì–û</b> –ü–†–ò–ó–û–í–û–ì–û –§–û–ù–î–ê'.format(*get_spoof_info_for_message(4)),
                         parse_mode='HTML',
                         reply_markup=start_menu())
    else:
        bot.send_message(message.chat.id,
                         '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç üò¢',
                         reply_markup=start_menu())


@bot.callback_query_handler(func=lambda call: call.data == 'get_started')
def get_started_spoof_user_message(call):
    price = get_spoof_price()
    amount = get_variables_amount(call.message.chat.id)
    print(price, amount)
    if price <= amount:
        update_variables_cur_activity(call.message.chat.id, 1)
        real_amount = update_variables_amount(call.message.chat.id, -price)
        update_spoof_participants()
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id,
                         '–í—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! ü§ë\n'
                         '–° –í–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {} —Ä—É–±\n'
                         '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É: {} —Ä—É–±'.format(price, real_amount),
                         reply_markup=start_menu())
        bot.answer_callback_query(call.id, text='–£—Å–ø–µ—Ö!')
    else:
        bot.send_message(call.message.chat.id,
                         '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ üò¢\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –≤ üè° –õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ',
                         reply_markup=start_menu())
        bot.answer_callback_query(call.id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É')



# ==============================================================
# Admin Interface

@bot.message_handler(commands=['admin'], func=lambda message: message.chat.id == admin_id)
def start_admin_message(message):
    update_variables_stage(admin_id, 'admin')
    bot.send_message(message.chat.id,
                     'üèõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
                     reply_markup=start_admin_menu())


@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' and
                                          get_variables_stage(message.chat.id) == 'admin')
def get_to_main_menu_admin_message(message):
    update_variables_stage(admin_id, 'user')
    bot.send_message(message.chat.id,
                     'üì∞ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                     parse_mode='HTML',
                     reply_markup=start_menu())


@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and
                                          get_variables_stage(message.chat.id) == 'admin')
def get_statistics_admin_message(message):
    bot.send_message(admin_id,
                     'üìä    <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n'
                     'üé≤ –í—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {}\n'
                     'üí∞ –°—É–º–º–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤: {} —Ä—É–±\n'
                     'üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {} —Ä—É–±'.format(*get_statistics_all()),
                     parse_mode='HTML',
                     reply_markup=start_admin_menu())


@bot.message_handler(func=lambda message: message.text == 'üé≤ –†–æ–∑—ã–≥—Ä—ã—à' and
                                          get_variables_stage(message.chat.id) == 'admin')
def create_spoof_admin_message(message):
    if get_spoof_active():
        bot.send_message(admin_id,
                         'üé≤üé≤ <b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{}</b> üé≤üé≤\n\n'
                         'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}\n'
                         'üí∞ –ë–∞–Ω–∫: {} —Ä—É–±\n'
                         'üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {} —Ä—É–± ({}%)\n'
                         'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {} —Ä—É–±\n\n'
                         'üèÜ –ü—Ä–∏–∑—ã:\n'
                         '{}'.format(*get_spoof_info_for_message(2)),
                         parse_mode='HTML',
                         reply_markup=start_spoof_admin_menu())
    else:
        msg = bot.send_message(admin_id,
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:',
                               reply_markup=cancel_spoof_admin_menu())
        bot.register_next_step_handler(msg, get_price_spoof_message)


def get_price_spoof_message(message):
    price = get_integer_from_message(message.text)
    if price == 'exit':
        bot.send_message(message.chat.id,
                         '–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω',
                         reply_markup=start_admin_menu())
    elif price == 'not a number':
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∂–µ—Ç—Å—è, –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ...\n'
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è —Å–Ω–æ–≤–∞:',
                               reply_markup=cancel_spoof_admin_menu())
        bot.register_next_step_handler(msg, get_price_spoof_message)
    else:
        update_spoof_price(price)
        msg = bot.send_message(message.chat.id,
                               '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –≤–∏–¥–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª '
                               '–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É\n\n'
                               '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 50 20 10</i>',
                               parse_mode='HTML',
                               reply_markup=cancel_spoof_admin_menu())
        bot.register_next_step_handler(msg, get_prizes_spoof_message)


def get_prizes_spoof_message(message):
    prizes = get_prizes_list_from_message(message.text)
    if prizes == 'exit':
        update_spoof_price(0)
        bot.send_message(message.chat.id,
                         '–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω',
                         reply_markup=start_admin_menu())
    elif prizes == 'not a number':
        msg = bot.send_message(message.chat.id,
                               '–ö–∞–∂–µ—Ç—Å—è, –í—ã –≤–≤–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –Ω–µ–≤–µ—Ä–Ω–æ...\n'
                               '–í–æ–∑–º–æ–∂–Ω–æ, —Å—É–º–º–∞ –ø—Ä–∏–∑–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%\n'
                               '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∑—ã —Å–Ω–æ–≤–∞:',
                               reply_markup=cancel_spoof_admin_menu())
        bot.register_next_step_handler(msg, get_prizes_spoof_message)
    else:
        update_spoof_prizes(prizes)
        bot.send_message(message.chat.id,
                         '–û—Ç–ª–∏—á–Ω–æ! –†–æ–∑—ã–≥—Ä—ã—à –≥–æ—Ç–æ–≤!\n'
                         '–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º:\n\n'
                         'üé≤üé≤ <b>–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{}</b> üé≤üé≤\n\n'
                         'üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {}%\n'
                         'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: {} —Ä—É–±\n\n'
                         'üèÜ –ü—Ä–∏–∑—ã:\n'
                         '{}'
                         '\n–ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?'.format(*get_spoof_info_for_message(1)),
                         parse_mode='HTML',
                         reply_markup=decide_start_spoof_admin_menu())


@bot.message_handler(func=lambda message: message.text == 'üöÄ –ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à' and
                                          get_variables_stage(message.chat.id) == 'admin')
def start_spoof_admin_message(message):
    update_spoof_active(1)
    update_statistics_number()
    bot.send_message(admin_id,
                     '‚è≥ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω!',
                     reply_markup=start_admin_menu())
    # TODO: send spam
    #bot.send_message(
    #                 '<b>–ó–∞–ø—É—â–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à</b>',
    #                 parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞' and
                                          get_variables_stage(message.chat.id) == 'admin')
def cancel_spoof_admin_message(message):
    update_spoof_active(0)
    update_spoof_price(0)
    update_spoof_prizes('')
    bot.send_message(admin_id,
                     '–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω',
                     reply_markup=start_admin_menu())


@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥' and
                                          get_variables_stage(message.chat.id) == 'admin')
def get_back_to_admin_message(message):
    bot.send_message(admin_id,
                     'üèõ <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>',
                     parse_mode='HTML',
                     reply_markup=start_admin_menu())


@bot.message_handler(func=lambda message: message.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à' and
                                          get_variables_stage(message.chat.id) == 'admin')
def end_spoof_admin_message(message):
    bot.send_message(admin_id,
                     '‚åõÔ∏è –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!',
                     reply_markup=start_admin_menu())
    # TODO: send spam
    bot.send_message(admin_id,
                     '<b>–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n'
                     'üçæ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n'
                     '{}'.format(*get_spoof_info_for_message(3)),
                     parse_mode='HTML',
                     reply_markup=start_admin_menu())




if __name__ == '__main__':
    bot.polling(none_stop=True, timeout=20)
